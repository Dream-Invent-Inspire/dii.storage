using dii.storage.Models;
using dii.storage.Models.Interfaces;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace dii.storage
{
    public abstract class DiiContext
	{
		#region Public Properties
		public INoSqlDatabaseConfig Config { get; protected set; }
		public int? DbThroughput { get; protected set; }
		public bool DatabaseCreatedThisContext { get; protected set; }
		public Dictionary<Type, TableMetaData> TableMappings { get; protected set; }
		#endregion Public Properties

		#region Public Methods
		/// <summary>
		/// Checks if the database exists and creates if it does not.
		/// </summary>
		/// <returns>Should always return true or throw an exception.</returns>
		public abstract Task<bool> DoesDatabaseExistAsync();

		/// <summary>
		/// Initializes the tables using the provided <see cref="TableMetaData"/>.
		/// </summary>
		/// <param name="tableMetaDatas">The <see cref="TableMetaData"/> generated by the <see cref="Optimizer"/>.</param>
		/// <returns>A task for async completion.</returns>
		public abstract Task InitTables(ICollection<TableMetaData> tableMetaDatas);
		#endregion Public Methods
	}
}