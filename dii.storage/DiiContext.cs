using dii.storage.Models;
using dii.storage.Models.Interfaces;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace dii.storage
{
    /// <summary>
    /// An contract intended to represent the necessary components of a DiiContext.
    /// <para>
    /// This is intended to be used with the singleton pattern.
    /// </para>
    /// </summary>
    public abstract class DiiContext
	{
		#region Public Properties
		/// <summary>
		/// The <see cref="INoSqlDatabaseConfig"/> configuration to be used by this context.
		/// </summary>
		public INoSqlDatabaseConfig Config { get; protected set; }

        /// <summary>
        /// The max RU/sec per database id.
        /// </summary>
        public Dictionary<string, int?> DbThroughputs { get; protected set; } = new Dictionary<string, int?>();

        /// <summary>
        /// Lists the DatabaseIds this instance of the <see cref="DiiContext"/> was responsible
        /// for creating.
        /// </summary>
        public List<string> DatabasesCreatedThisContext { get; protected set; } = new List<string>();

        /// <summary>
        /// Represents the initialized table mappings within this instance of the <see cref="DiiContext"/>
		/// per database id.
        /// </summary>
        public Dictionary<string, Dictionary<Type, TableMetaData>> TableMappings { get; protected set; } = new Dictionary<string, Dictionary<Type, TableMetaData>>();
        #endregion Public Properties

        #region Public Methods
        /// <summary>
        /// Checks if the database exists and creates if it does not.
        /// </summary>
        /// <returns>Should always return true or throw an exception.</returns>
        public abstract Task<bool> DoesDatabaseExistAsync();

        /// <summary>
        /// Initializes the tables using the provided <see cref="TableMetaData"/> and database id.
        /// </summary>
        /// <param name="databaseId">The databaseId associated with the tables to initialize.</param>
        /// <param name="tableMetaDatas">The <see cref="TableMetaData"/> generated by the <see cref="Optimizer"/>.</param>
        /// <returns>A task for async completion.</returns>
        public abstract Task InitTablesAsync(string databaseId, ICollection<TableMetaData> tableMetaDatas);
		#endregion Public Methods
	}
}